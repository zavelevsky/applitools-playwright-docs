"use strict";(self.webpackChunkapplitools_playwright_docs=self.webpackChunkapplitools_playwright_docs||[]).push([[3549],{5721:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=s(4848),t=s(8453);const r={},l="Migrating to Applitools Eyes from Other Visual Testing Methods",a={id:"migration",title:"Migrating to Applitools Eyes from Other Visual Testing Methods",description:"This guide will help you transition from Playwright's built-in screenshot comparison or other visual testing tools to Applitools Eyes. We'll cover the key differences, migration strategies, and best practices to ensure a smooth transition.",source:"@site/docs/migration.md",sourceDirName:".",slug:"/migration",permalink:"/applitools-playwright-docs/docs/migration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Troubleshooting",permalink:"/applitools-playwright-docs/docs/troubleshooting"},next:{title:"Examples and Tutorials",permalink:"/applitools-playwright-docs/docs/examples-and-tutorials"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Understanding the Benefits of Migration",id:"understanding-the-benefits-of-migration",level:2},{value:"Migrating from Playwright&#39;s Built-in Screenshot Comparison",id:"migrating-from-playwrights-built-in-screenshot-comparison",level:2},{value:"Before (Playwright screenshot):",id:"before-playwright-screenshot",level:3},{value:"After (Applitools Eyes):",id:"after-applitools-eyes",level:3},{value:"Migrating from Other Visual Testing Tools",id:"migrating-from-other-visual-testing-tools",level:2},{value:"Adapting Your Test Structure",id:"adapting-your-test-structure",level:2},{value:"Handling Existing Baselines",id:"handling-existing-baselines",level:2},{value:"Updating CI/CD Pipelines",id:"updating-cicd-pipelines",level:2},{value:"Best Practices for Migration",id:"best-practices-for-migration",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"migrating-to-applitools-eyes-from-other-visual-testing-methods",children:"Migrating to Applitools Eyes from Other Visual Testing Methods"})}),"\n",(0,i.jsx)(n.p,{children:"This guide will help you transition from Playwright's built-in screenshot comparison or other visual testing tools to Applitools Eyes. We'll cover the key differences, migration strategies, and best practices to ensure a smooth transition."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#understanding-the-benefits-of-migration",children:"Understanding the Benefits of Migration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#migrating-from-playwrights-built-in-screenshot-comparison",children:"Migrating from Playwright's Built-in Screenshot Comparison"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#migrating-from-other-visual-testing-tools",children:"Migrating from Other Visual Testing Tools"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#adapting-your-test-structure",children:"Adapting Your Test Structure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#handling-existing-baselines",children:"Handling Existing Baselines"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#updating-cicd-pipelines",children:"Updating CI/CD Pipelines"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices-for-migration",children:"Best Practices for Migration"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-benefits-of-migration",children:"Understanding the Benefits of Migration"}),"\n",(0,i.jsx)(n.p,{children:"Before diving into the migration process, it's important to understand the advantages of using Applitools Eyes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"AI-powered visual comparisons"}),"\n",(0,i.jsx)(n.li,{children:"Automated maintenance with self-healing tests"}),"\n",(0,i.jsx)(n.li,{children:"Cross-browser and cross-device testing with the Ultrafast Grid"}),"\n",(0,i.jsx)(n.li,{children:"Advanced collaboration features"}),"\n",(0,i.jsx)(n.li,{children:"Detailed reporting and analytics"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"migrating-from-playwrights-built-in-screenshot-comparison",children:"Migrating from Playwright's Built-in Screenshot Comparison"}),"\n",(0,i.jsxs)(n.p,{children:["If you're currently using Playwright's ",(0,i.jsx)(n.code,{children:"page.screenshot()"})," and manual comparison, here's how to migrate to Applitools Eyes:"]}),"\n",(0,i.jsx)(n.h3,{id:"before-playwright-screenshot",children:"Before (Playwright screenshot):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const { test, expect } = require('@playwright/test');\n\ntest('homepage visual comparison', async ({ page }) => {\n  await page.goto('https://example.com');\n  const screenshot = await page.screenshot();\n  expect(screenshot).toMatchSnapshot('homepage.png');\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"after-applitools-eyes",children:"After (Applitools Eyes):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const { test } = require('@playwright/test');\nconst { Eyes, Target } = require('@applitools/eyes-playwright');\n\ntest('homepage visual comparison', async ({ page }) => {\n  const eyes = new Eyes();\n  \n  try {\n    await eyes.open(page, 'My App', 'Homepage Test');\n    await page.goto('https://example.com');\n    await eyes.check('Homepage', Target.window().fully());\n    await eyes.close();\n  } finally {\n    await eyes.abort();\n  }\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Key differences:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No need to manually manage screenshot files"}),"\n",(0,i.jsx)(n.li,{children:"AI-powered comparison instead of pixel-by-pixel matching"}),"\n",(0,i.jsx)(n.li,{children:"Automatic handling of dynamic content and minor rendering differences"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"migrating-from-other-visual-testing-tools",children:"Migrating from Other Visual Testing Tools"}),"\n",(0,i.jsx)(n.p,{children:"If you're migrating from another visual testing tool, the process will be similar. Here are some general steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install the Applitools Eyes SDK:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @applitools/eyes-playwright\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Replace the existing visual testing tool's initialization with Applitools Eyes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const { Eyes, Target } = require('@applitools/eyes-playwright');\nconst eyes = new Eyes();\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Replace screenshot capture and comparison commands with Applitools checks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Before (generic example)\nawait someVisualTool.captureAndCompare('Homepage');\n\n// After (Applitools)\nawait eyes.check('Homepage', Target.window().fully());\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Update any custom logic for handling dynamic content or ignore regions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"await eyes.check('Dynamic Page', Target.window().fully()\n  .ignoreRegions('#dynamic-content')\n  .layout('#semi-dynamic-region')\n);\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"adapting-your-test-structure",children:"Adapting Your Test Structure"}),"\n",(0,i.jsx)(n.p,{children:"When migrating to Applitools Eyes, you may need to adjust your test structure:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Wrap your tests with ",(0,i.jsx)(n.code,{children:"eyes.open()"})," and ",(0,i.jsx)(n.code,{children:"eyes.close()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"test('visual test', async ({ page }) => {\n  await eyes.open(page, 'My App', 'Test Name');\n  // Your test steps here\n  await eyes.close();\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"eyes.check()"})," for visual validations instead of assertions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Before\nexpect(await page.screenshot()).toMatchSnapshot();\n\n// After\nawait eyes.check('Check Name', Target.window().fully());\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Implement proper error handling:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"try {\n  await eyes.open(page, 'My App', 'Test Name');\n  // Test steps\n  await eyes.close();\n} finally {\n  await eyes.abort(); // Will end the test if an error occurred\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"handling-existing-baselines",children:"Handling Existing Baselines"}),"\n",(0,i.jsx)(n.p,{children:"Migrating existing baselines:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"For critical flows, consider running both old and new visual tests in parallel during the transition."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use Applitools' baseline management features:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"eyes.setBaselineBranchName('migration-baseline');\neyes.setParentBranchName('master');\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Gradually replace old baselines as you validate the new Applitools results."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"updating-cicd-pipelines",children:"Updating CI/CD Pipelines"}),"\n",(0,i.jsx)(n.p,{children:"Adjust your CI/CD configuration:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Add the Applitools API key as an environment variable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"env:\n  APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Update test run commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- name: Run visual tests\n  run: npx playwright test\n  env:\n    APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Configure failure thresholds based on Applitools results:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const { VisualGridRunner, ClassicRunner, ConfigurationFactory } = require('@applitools/eyes-playwright');\n\n// Setup\nconst config = ConfigurationFactory.getConfig();\nconst runner = new VisualGridRunner({ testConcurrency: 5 });\n\n// After running tests\nconst results = await runner.getAllTestResults(false);\nconsole.log(results.toString());\n\nif (results.getUnresolvedCount() > 0) {\n  throw new Error(`${results.getUnresolvedCount()} visual differences found!`);\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-migration",children:"Best Practices for Migration"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Gradual Migration"}),": Start with a small subset of tests and gradually expand."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parallel Running"}),": Run both old and new visual tests simultaneously during the transition period."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Review and Refine"}),": Regularly review test results and refine your visual testing strategy."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Team Training"}),": Ensure your team is trained on Applitools Eyes concepts and best practices."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Leverage Applitools Features"}),": Make use of Applitools' advanced features like the Ultrafast Grid and AI-powered matching."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Update Documentation"}),": Keep your testing documentation up-to-date with the new Applitools workflow."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Monitor Performance"}),": Keep an eye on test execution times and optimize as necessary."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By following this guide, you should be able to smoothly transition from your current visual testing method to Applitools Eyes, leveraging its advanced features to improve your visual testing process."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);