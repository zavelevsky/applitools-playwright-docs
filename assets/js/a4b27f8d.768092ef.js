"use strict";(self.webpackChunkapplitools_playwright_docs=self.webpackChunkapplitools_playwright_docs||[]).push([[9347],{4154:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var i=s(4848),t=s(8453);const l={},r="CI/CD Integration for Applitools Eyes SDK with Playwright",a={id:"ci-cd-integration",title:"CI/CD Integration for Applitools Eyes SDK with Playwright",description:"This guide covers how to integrate Applitools Eyes visual testing with your CI/CD pipeline when using Playwright. We'll provide examples for popular CI/CD platforms and best practices for efficient integration.",source:"@site/docs/ci-cd-integration.md",sourceDirName:".",slug:"/ci-cd-integration",permalink:"/applitools-playwright-docs/docs/ci-cd-integration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Advanced Usage",permalink:"/applitools-playwright-docs/docs/advanced-usage"},next:{title:"Applitools Dashboard",permalink:"/applitools-playwright-docs/docs/applitools-dashboard"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"General Setup",id:"general-setup",level:2},{value:"GitHub Actions",id:"github-actions",level:2},{value:"Jenkins",id:"jenkins",level:2},{value:"GitLab CI",id:"gitlab-ci",level:2},{value:"Azure DevOps",id:"azure-devops",level:2},{value:"CircleCI",id:"circleci",level:2},{value:"Best Practices",id:"best-practices",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cicd-integration-for-applitools-eyes-sdk-with-playwright",children:"CI/CD Integration for Applitools Eyes SDK with Playwright"})}),"\n",(0,i.jsx)(n.p,{children:"This guide covers how to integrate Applitools Eyes visual testing with your CI/CD pipeline when using Playwright. We'll provide examples for popular CI/CD platforms and best practices for efficient integration."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#general-setup",children:"General Setup"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#github-actions",children:"GitHub Actions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#jenkins",children:"Jenkins"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#gitlab-ci",children:"GitLab CI"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#azure-devops",children:"Azure DevOps"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#circleci",children:"CircleCI"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"general-setup",children:"General Setup"}),"\n",(0,i.jsx)(n.p,{children:"Regardless of the CI/CD platform you're using, there are some common steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure Node.js is installed in your CI environment"}),"\n",(0,i.jsx)(n.li,{children:"Install Playwright and Applitools Eyes SDK"}),"\n",(0,i.jsx)(n.li,{children:"Set up your Applitools API key as an environment variable"}),"\n",(0,i.jsx)(n.li,{children:"Run your Playwright tests with Applitools Eyes"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here's a general script that you can adapt for your CI/CD platform:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install dependencies\nnpm ci\n\n# Install Playwright browsers\nnpx playwright install\n\n# Run tests\nAPPLITOOLS_API_KEY=$YOUR_API_KEY npx playwright test\n"})}),"\n",(0,i.jsx)(n.h2,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:".github/workflows/visual-tests.yml"})," file in your repository:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: Visual Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm ci\n      - name: Install Playwright\n        run: npx playwright install\n      - name: Run visual tests\n        run: npx playwright test\n        env:\n          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Make sure to add your Applitools API key as a secret in your GitHub repository settings."}),"\n",(0,i.jsx)(n.h2,{id:"jenkins",children:"Jenkins"}),"\n",(0,i.jsx)(n.p,{children:"Add the following stage to your Jenkinsfile:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"pipeline {\n    agent any\n    stages {\n        stage('Visual Tests') {\n            steps {\n                nodejs(nodeJSInstallationName: 'Node 14') {\n                    sh 'npm ci'\n                    sh 'npx playwright install'\n                    withCredentials([string(credentialsId: 'APPLITOOLS_API_KEY', variable: 'APPLITOOLS_API_KEY')]) {\n                        sh 'npx playwright test'\n                    }\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Ensure you've added your Applitools API key as a credential in Jenkins."}),"\n",(0,i.jsx)(n.h2,{id:"gitlab-ci",children:"GitLab CI"}),"\n",(0,i.jsxs)(n.p,{children:["Add the following to your ",(0,i.jsx)(n.code,{children:".gitlab-ci.yml"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"visual_tests:\n  image: mcr.microsoft.com/playwright:v1.21.0-focal\n  stage: test\n  script:\n    - npm ci\n    - npx playwright install\n    - npx playwright test\n  variables:\n    APPLITOOLS_API_KEY: $APPLITOOLS_API_KEY\n"})}),"\n",(0,i.jsx)(n.p,{children:"Add your Applitools API key as a variable in your GitLab CI/CD settings."}),"\n",(0,i.jsx)(n.h2,{id:"azure-devops",children:"Azure DevOps"}),"\n",(0,i.jsx)(n.p,{children:"Add the following task to your Azure Pipelines YAML file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- task: NodeTool@0\n  inputs:\n    versionSpec: '14.x'\n  displayName: 'Install Node.js'\n\n- script: |\n    npm ci\n    npx playwright install\n  displayName: 'Install dependencies'\n\n- script: |\n    npx playwright test\n  displayName: 'Run visual tests'\n  env:\n    APPLITOOLS_API_KEY: $(APPLITOOLS_API_KEY)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Add your Applitools API key as a pipeline variable in Azure DevOps."}),"\n",(0,i.jsx)(n.h2,{id:"circleci",children:"CircleCI"}),"\n",(0,i.jsxs)(n.p,{children:["Add the following to your ",(0,i.jsx)(n.code,{children:".circleci/config.yml"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"version: 2.1\njobs:\n  visual_tests:\n    docker:\n      - image: mcr.microsoft.com/playwright:v1.21.0-focal\n    steps:\n      - checkout\n      - run:\n          name: Install dependencies\n          command: |\n            npm ci\n            npx playwright install\n      - run:\n          name: Run visual tests\n          command: npx playwright test\n          environment:\n            APPLITOOLS_API_KEY: ${APPLITOOLS_API_KEY}\n\nworkflows:\n  version: 2\n  test:\n    jobs:\n      - visual_tests\n"})}),"\n",(0,i.jsx)(n.p,{children:"Add your Applitools API key as an environment variable in CircleCI project settings."}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Caching"}),": Cache your ",(0,i.jsx)(n.code,{children:"node_modules"})," to speed up builds."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parallel Execution"}),": Leverage your CI/CD platform's parallel execution capabilities along with Applitools' Visual Grid for faster test runs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Selective Testing"}),": Run visual tests only when necessary, e.g., on pull requests or specific branches."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Fail Fast"}),": Configure your tests to fail fast if critical visual issues are detected."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Artifacts"}),": Save test results and logs as artifacts for easy debugging."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Notifications"}),": Set up notifications for test failures, particularly for visual differences."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Baseline Management"}),": Implement a strategy for managing baselines, possibly updating them automatically for certain types of changes."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Environment Variables"}),": Use environment variables for configuration to keep sensitive data out of your code repository."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example of implementing some of these best practices:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { Eyes, BatchInfo, Configuration } from '@applitools/eyes-playwright';\n\nconst eyes = new Eyes();\n\nconst configuration = new Configuration();\nconfiguration.setBatch(\n  new BatchInfo(process.env.CI_COMMIT_REF_NAME || 'Local')\n);\nconfiguration.setApiKey(process.env.APPLITOOLS_API_KEY);\nconfiguration.setSaveNewTests(false);\nconfiguration.setExitcode(true);\n\neyes.setConfiguration(configuration);\n\n// In your test\ntest('Visual test', async ({ page }) => {\n  await eyes.open(page, 'My App', 'Test name', { width: 1024, height: 768 });\n  await page.goto('https://example.com');\n  await eyes.check('Page', Target.window().fully());\n  await eyes.close(false);\n});\n\n// After all tests\nafterAll(async () => {\n  const results = await eyes.getRunner().getAllTestResults(false);\n  console.log(results.toString());\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"By following these guidelines and examples, you can efficiently integrate Applitools Eyes visual testing into your CI/CD pipeline, ensuring that visual regressions are caught early in your development process."})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);