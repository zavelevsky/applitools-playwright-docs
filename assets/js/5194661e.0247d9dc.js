"use strict";(self.webpackChunkapplitools_playwright_docs=self.webpackChunkapplitools_playwright_docs||[]).push([[9508],{1876:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>c,toc:()=>r});var t=s(4848),i=s(8453);const a={},o="Advanced Features",c={id:"api/advanced-features",title:"Advanced Features",description:"This guide covers advanced features and techniques available in Applitools Eyes for Playwright. These features are designed for complex testing scenarios and can significantly enhance your visual testing capabilities.",source:"@site/docs/api/advanced-features.md",sourceDirName:"api",slug:"/api/advanced-features",permalink:"/applitools-playwright-docs/docs/api/advanced-features",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"Customization",permalink:"/applitools-playwright-docs/docs/api/customization"}},l={},r=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Visual Grid",id:"visual-grid",level:2},{value:"Accessibility Testing",id:"accessibility-testing",level:2},{value:"Visual Locators",id:"visual-locators",level:2},{value:"Coded Regions",id:"coded-regions",level:2},{value:"Custom Viewport Sizes",id:"custom-viewport-sizes",level:2},{value:"Multi-Page Tests",id:"multi-page-tests",level:2},{value:"Handling Dynamic Content",id:"handling-dynamic-content",level:2},{value:"Advanced Match Settings",id:"advanced-match-settings",level:2},{value:"Test Results API",id:"test-results-api",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"advanced-features",children:"Advanced Features"})}),"\n",(0,t.jsx)(n.p,{children:"This guide covers advanced features and techniques available in Applitools Eyes for Playwright. These features are designed for complex testing scenarios and can significantly enhance your visual testing capabilities."}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#visual-grid",children:"Visual Grid"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#accessibility-testing",children:"Accessibility Testing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#visual-locators",children:"Visual Locators"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#coded-regions",children:"Coded Regions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#custom-viewport-sizes",children:"Custom Viewport Sizes"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#multi-page-tests",children:"Multi-Page Tests"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#handling-dynamic-content",children:"Handling Dynamic Content"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#advanced-match-settings",children:"Advanced Match Settings"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#test-results-api",children:"Test Results API"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"visual-grid",children:"Visual Grid"}),"\n",(0,t.jsx)(n.p,{children:"The Visual Grid allows you to run cross-browser and cross-device tests in parallel, significantly reducing test execution time."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const {\n  VisualGridRunner,\n  BrowserType,\n  DeviceName,\n  ScreenOrientation,\n  Configuration,\n  Eyes,\n} = require('@applitools/eyes-playwright');\n\n// Create a runner with concurrency of 5\nconst runner = new VisualGridRunner({ testConcurrency: 5 });\n\n// Create a shared configuration for all tests\nconst config = new Configuration();\nconfig.addBrowser({ width: 1200, height: 800, name: BrowserType.CHROME });\nconfig.addBrowser({ width: 1200, height: 800, name: BrowserType.FIREFOX });\nconfig.addBrowser({ width: 1200, height: 800, name: BrowserType.SAFARI });\nconfig.addBrowser({\n  width: 1200,\n  height: 800,\n  name: BrowserType.EDGE_CHROMIUM,\n});\nconfig.addDevice(DeviceName.iPhone_X, ScreenOrientation.PORTRAIT);\nconfig.addDevice(DeviceName.Pixel_2, ScreenOrientation.LANDSCAPE);\n\n// Create an Eyes instance and set the configuration\nconst eyes = new Eyes(runner);\neyes.setConfiguration(config);\n\n// Your test code here\n\n// Get all test results\nconst allTestResults = await runner.getAllTestResults();\nconsole.log(allTestResults);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"accessibility-testing",children:"Accessibility Testing"}),"\n",(0,t.jsx)(n.p,{children:"Applitools Eyes can perform accessibility checks as part of your visual tests."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const {\n  Eyes,\n  Target,\n  AccessibilityRegionType,\n} = require('@applitools/eyes-playwright');\n\nconst eyes = new Eyes();\n\nawait eyes.open(page, 'My App', 'Accessibility Test');\n\nawait eyes.check(\n  'Accessible Page',\n  Target.window()\n    .accessibility('[data-testid=\"main-content\"]') // Check entire region\n    .accessibilityRegion('#login-form', AccessibilityRegionType.RegularText)\n);\n\nawait eyes.close();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"visual-locators",children:"Visual Locators"}),"\n",(0,t.jsx)(n.p,{children:"Visual locators allow you to find elements based on their visual appearance rather than DOM structure."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const eyes = new Eyes();\n\nawait eyes.open(page, 'My App', 'Visual Locator Test');\n\n// Define the visual locator\nconst loginButtonLocator = await eyes.getLocator({ id: 'Login Button' });\n\n// Use the locator in a check\nawait eyes.check(\n  'Login Page',\n  Target.window().ignoreRegions(loginButtonLocator)\n);\n\n// Use the locator with Playwright\nconst loginButton = await loginButtonLocator.locate(page);\nawait loginButton.click();\n\nawait eyes.close();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"coded-regions",children:"Coded Regions"}),"\n",(0,t.jsx)(n.p,{children:"Coded regions allow you to programmatically define regions for checks based on page content or structure."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { Eyes, Target, Region } = require('@applitools/eyes-playwright');\n\nconst eyes = new Eyes();\n\nawait eyes.open(page, 'My App', 'Coded Regions Test');\n\nawait eyes.check(\n  'Dynamic Page',\n  Target.window()\n    .ignoreRegions(async () => {\n      const dynamicElement = await page.$('.dynamic-content');\n      return new Region(await dynamicElement.boundingBox());\n    })\n    .layoutRegions(async () => {\n      const layoutElements = await page.$$('.layout-section');\n      return Promise.all(\n        layoutElements.map(async (elem) => new Region(await elem.boundingBox()))\n      );\n    })\n);\n\nawait eyes.close();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"custom-viewport-sizes",children:"Custom Viewport Sizes"}),"\n",(0,t.jsx)(n.p,{children:"You can specify custom viewport sizes for your tests, which is useful for testing responsive designs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { Eyes, Target } = require('@applitools/eyes-playwright');\n\nconst eyes = new Eyes();\n\nconst viewportSizes = [\n  { width: 1200, height: 800 },\n  { width: 768, height: 1024 },\n  { width: 375, height: 667 },\n];\n\nfor (const size of viewportSizes) {\n  await page.setViewportSize(size);\n  await eyes.open(page, 'My App', `Viewport Test ${size.width}x${size.height}`);\n  await eyes.check(\n    `Viewport ${size.width}x${size.height}`,\n    Target.window().fully()\n  );\n  await eyes.close();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"multi-page-tests",children:"Multi-Page Tests"}),"\n",(0,t.jsx)(n.p,{children:"You can perform visual testing across multiple pages in a single test."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const eyes = new Eyes();\n\nawait eyes.open(page, 'My App', 'Multi-Page Test');\n\nawait page.goto('https://example.com/page1');\nawait eyes.check('Page 1', Target.window().fully());\n\nawait page.goto('https://example.com/page2');\nawait eyes.check('Page 2', Target.window().fully());\n\nawait page.goto('https://example.com/page3');\nawait eyes.check('Page 3', Target.window().fully());\n\nawait eyes.close();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"handling-dynamic-content",children:"Handling Dynamic Content"}),"\n",(0,t.jsx)(n.p,{children:"For pages with dynamic content, you can use various strategies to ensure consistent checks."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { Eyes, Target } = require('@applitools/eyes-playwright');\n\nconst eyes = new Eyes();\n\nawait eyes.open(page, 'My App', 'Dynamic Content Test');\n\n// Ignore dynamic regions\nawait eyes.check(\n  'Dynamic Page',\n  Target.window().ignore('.dynamic-content').layout('.user-generated-content')\n);\n\n// Use a custom script to stabilize dynamic content\nawait eyes.check(\n  'Stabilized Page',\n  Target.window().scriptHooks({\n    beforeCaptureScreenshot:\n      \"document.querySelector('.timestamp').textContent = 'TIMESTAMP';\",\n  })\n);\n\nawait eyes.close();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-match-settings",children:"Advanced Match Settings"}),"\n",(0,t.jsx)(n.p,{children:"You can fine-tune how Applitools compares images using advanced match settings."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { Eyes, Target, MatchLevel } = require('@applitools/eyes-playwright');\n\nconst eyes = new Eyes();\n\nawait eyes.open(page, 'My App', 'Advanced Match Settings Test');\n\nawait eyes.check(\n  'Complex Page',\n  Target.window()\n    .strict('#header')\n    .layout('#main-content')\n    .content('.article')\n    .floating('#floating-button', 10, 10, 5, 5)\n    .ignoreDisplacements()\n    .matchLevel(MatchLevel.Layout)\n);\n\nawait eyes.close();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"test-results-api",children:"Test Results API"}),"\n",(0,t.jsx)(n.p,{children:"You can programmatically access and analyze test results using the Test Results API."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { Eyes, TestResults } = require('@applitools/eyes-playwright');\n\nconst eyes = new Eyes();\n\nawait eyes.open(page, 'My App', 'Test Results API Test');\n\n// Perform checks...\n\nconst testResults = await eyes.close(false);\n\nif (testResults.getStatus() !== TestResults.PASSED) {\n  console.log('Test failed');\n  console.log(`Mismatches: ${testResults.getMismatches()}`);\n  console.log(`URL: ${testResults.getUrl()}`);\n}\n\n// Access specific step results\nconst stepResults = testResults.getStepsInfo();\nfor (const step of stepResults) {\n  console.log(`Step: ${step.getName()}`);\n  console.log(`Is Different: ${step.getIsDifferent()}`);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"These advanced features provide powerful tools for creating sophisticated visual testing scenarios with Applitools Eyes and Playwright. By leveraging these capabilities, you can create more comprehensive and efficient visual testing suites that can handle complex application behaviors and structures."})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(6540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);