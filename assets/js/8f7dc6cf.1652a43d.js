"use strict";(self.webpackChunkapplitools_playwright_docs=self.webpackChunkapplitools_playwright_docs||[]).push([[596],{6180:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var i=s(4848),t=s(8453);const a={},r="Maintaining Visual Tests",l={id:"guides/maintaining-tests",title:"Maintaining Visual Tests",description:"Maintaining visual tests is crucial for ensuring their continued effectiveness and efficiency. This guide will help you keep your Applitools Eyes tests with Playwright up-to-date and manageable as your application evolves.",source:"@site/docs/guides/maintaining-tests.md",sourceDirName:"guides",slug:"/guides/maintaining-tests",permalink:"/applitools-playwright-docs/docs/guides/maintaining-tests",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Choosing What to Visually Test",permalink:"/applitools-playwright-docs/docs/guides/choosing-what-to-test"},next:{title:"Handling Failures in Visual Tests",permalink:"/applitools-playwright-docs/docs/guides/handling-failures"}},c={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Understanding the Need for Test Maintenance",id:"understanding-the-need-for-test-maintenance",level:2},{value:"Updating Baselines",id:"updating-baselines",level:2},{value:"Handling Intended Changes",id:"handling-intended-changes",level:2},{value:"Managing Test Debt",id:"managing-test-debt",level:2},{value:"Optimizing Test Performance",id:"optimizing-test-performance",level:2},{value:"Dealing with Flaky Tests",id:"dealing-with-flaky-tests",level:2},{value:"Version Control and CI/CD Considerations",id:"version-control-and-cicd-considerations",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"maintaining-visual-tests",children:"Maintaining Visual Tests"})}),"\n",(0,i.jsx)(n.p,{children:"Maintaining visual tests is crucial for ensuring their continued effectiveness and efficiency. This guide will help you keep your Applitools Eyes tests with Playwright up-to-date and manageable as your application evolves."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#understanding-the-need-for-test-maintenance",children:"Understanding the Need for Test Maintenance"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#updating-baselines",children:"Updating Baselines"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#handling-intended-changes",children:"Handling Intended Changes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#managing-test-debt",children:"Managing Test Debt"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#optimizing-test-performance",children:"Optimizing Test Performance"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dealing-with-flaky-tests",children:"Dealing with Flaky Tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#version-control-and-cicd-considerations",children:"Version Control and CI/CD Considerations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-need-for-test-maintenance",children:"Understanding the Need for Test Maintenance"}),"\n",(0,i.jsx)(n.p,{children:"Visual tests need regular maintenance due to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Intentional UI changes"}),"\n",(0,i.jsx)(n.li,{children:"New features or removed elements"}),"\n",(0,i.jsx)(n.li,{children:"Changes in dynamic content"}),"\n",(0,i.jsx)(n.li,{children:"Updates to testing infrastructure or dependencies"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Regular maintenance ensures tests remain valuable and don't become a burden."}),"\n",(0,i.jsx)(n.h2,{id:"updating-baselines",children:"Updating Baselines"}),"\n",(0,i.jsx)(n.p,{children:"When intentional UI changes occur:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Run your tests to identify affected checkpoints"}),"\n",(0,i.jsx)(n.li,{children:"Review changes in the Applitools dashboard"}),"\n",(0,i.jsx)(n.li,{children:"Accept new images as baselines for affected checkpoints"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// After making UI changes, run your tests\ntest('Updated homepage layout', async ({ page }) => {\n  await eyes.open(page, 'MyApp', 'Homepage Test');\n  await page.goto('/');\n  await eyes.check('Full page', Target.window().fully());\n  await eyes.close();\n});\n\n// Review results in the dashboard and accept new baselines\n"})}),"\n",(0,i.jsx)(n.h2,{id:"handling-intended-changes",children:"Handling Intended Changes"}),"\n",(0,i.jsx)(n.p,{children:"For planned UI updates:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"setMatchLevel"})," method to temporarily relax comparison criteria:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"test('Redesigned navbar', async ({ page }) => {\n  await eyes.open(page, 'MyApp', 'Navbar Test');\n  await page.goto('/');\n  await eyes.check('Navbar', Target.region('#navbar').layout());\n  await eyes.close();\n});\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Update test scripts to reflect new selectors or workflows"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Consider using the ",(0,i.jsx)(n.code,{children:"applitools.ignore"})," tag in your HTML to ignore specific elements during transition periods:"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div class="applitools-ignore">\n  \x3c!-- New element that should be ignored temporarily --\x3e\n</div>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"managing-test-debt",children:"Managing Test Debt"}),"\n",(0,i.jsx)(n.p,{children:"Regularly review and refactor your test suite:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Remove obsolete tests"}),"\n",(0,i.jsx)(n.li,{children:"Combine redundant checks"}),"\n",(0,i.jsx)(n.li,{children:"Update tests to reflect current best practices"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Before: Multiple separate checks\nawait eyes.check('Header', Target.region('#header'));\nawait eyes.check('Footer', Target.region('#footer'));\n\n// After: Combined check\nawait eyes.check('Header and Footer', Target.region('#header, #footer'));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"optimizing-test-performance",children:"Optimizing Test Performance"}),"\n",(0,i.jsx)(n.p,{children:"As your test suite grows, optimize for speed:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Use batches to group related tests"}),"\n",(0,i.jsx)(n.li,{children:"Leverage the Ultrafast Grid for parallel execution"}),"\n",(0,i.jsx)(n.li,{children:"Minimize redundant checks and page loads"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const { ClassicRunner, BatchInfo } = require('@applitools/eyes-playwright');\n\nconst batch = new BatchInfo('My batch name');\n\ntest.describe('My test suite', () => {\n  let eyes;\n  let runner;\n\n  test.beforeAll(async () => {\n    runner = new ClassicRunner();\n  });\n\n  test.beforeEach(async ({ page }) => {\n    eyes = new Eyes(runner);\n    await eyes.setBatch(batch);\n  });\n\n  // Your test cases here\n\n  test.afterAll(async () => {\n    const results = await runner.getAllTestResults();\n    console.log(results);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dealing-with-flaky-tests",children:"Dealing with Flaky Tests"}),"\n",(0,i.jsx)(n.p,{children:"To reduce flakiness:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Use strict selectors"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper waits"}),"\n",(0,i.jsx)(n.li,{children:"Handle dynamic content appropriately"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Use data-testid for more stable selectors\nawait eyes.check('User profile', Target.region('[data-testid=\"user-profile\"]'));\n\n// Wait for network idle before checking\nawait page.waitForLoadState('networkidle');\nawait eyes.check('After load', Target.window().fully());\n\n// Ignore dynamic regions\nawait eyes.check('Dashboard', Target.window().fully().ignoreRegions('#live-updates'));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"version-control-and-cicd-considerations",children:"Version Control and CI/CD Considerations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Store test scripts in version control alongside application code"}),"\n",(0,i.jsx)(n.li,{children:"Use branches for significant test updates"}),"\n",(0,i.jsx)(n.li,{children:"Implement code reviews for test changes"}),"\n",(0,i.jsx)(n.li,{children:"Automate baseline updates in your CI/CD pipeline"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Example GitHub Actions workflow step\n- name: Update Applitools baselines\n  if: github.event_name == 'push' && github.ref == 'refs/heads/main'\n  run: npx playwright test\n  env:\n    APPLITOOLS_UPDATE_BASELINE: 'true'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Regular Maintenance"}),": Schedule routine test reviews and updates"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": Keep test documentation up-to-date, including the purpose of each visual check"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Modular Design"}),": Create reusable functions for common test steps"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function checkCommonElements(page, eyes) {\n  await eyes.check('Header', Target.region('#header'));\n  await eyes.check('Footer', Target.region('#footer'));\n}\n\ntest('Homepage', async ({ page }) => {\n  await eyes.open(page, 'MyApp', 'Homepage Test');\n  await page.goto('/');\n  await checkCommonElements(page, eyes);\n  // Additional homepage-specific checks\n  await eyes.close();\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Consistent Naming"}),": Use clear, consistent naming conventions for tests and checkpoints"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Feedback Loop"}),": Establish a process for developers to easily update tests when making UI changes"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Periodic Full Comparisons"}),": Occasionally run full-page comparisons to catch unexpected changes"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Monitor Test Metrics"}),": Keep track of test run times, failure rates, and maintenance frequency to identify areas for improvement"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By following these guidelines and best practices, you can maintain a robust and efficient visual testing suite that evolves alongside your application, providing continuous value to your development process."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);